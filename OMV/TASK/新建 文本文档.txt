#include "stm32f4xx.h"                  // Device header
#include "extimu_task.h"

//陀螺仪输出数据包地址
uint8_t *IMU_OutPacket;
//接受数据包
uint8_t IMU_RxPacket[8];
//接收错误存入处理
uint8_t IMU_ErrPacket[8];
//陀螺仪接收标志位
uint8_t IMU_Flag;

//陀螺仪初始化
void IMU_Init(void)
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;//TX
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;//RX
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
	
	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 115200;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART1, &USART_InitStructure);
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_InitStructure);
	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	
	USART_Cmd(USART1, ENABLE);
}

//获取标志位
uint8_t IMU_GetFlag(void)
{
	return IMU_Flag;
}

//清除标志位
void IMU_ClearFlag(void)
{
	IMU_Flag = 0;
}

//发送一个字节
void IMU_SendByte(uint8_t Byte)
{
	USART_SendData(USART3, Byte);
	while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
}

//发送重置命令
void IMU_ResetYaw(void)
{
	IMU_SendByte(0xFF);
	IMU_SendByte(0xAA);
	IMU_SendByte(0x52);
}

//返回Yaw角
int16_t IMU_GetYaw(void)
{
	return (int16_t)(IMU_OutPacket[5] << 8 | IMU_OutPacket[4]);
}

//中断配置
void USART2_IRQHandler(void)
{
	static uint8_t RxState = 0;
	static uint8_t pRxPacket = 0;
	static uint8_t Check;
	if(USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == SET)
	{
		uint8_t RxData = USART_ReceiveData(USART3);
		switch(RxState)
		{
			case 0:
			{
				if(RxData == 0x55)
				{
					RxState = 1;
				}
				break;
			}
			case 1:
			{
				if(RxData == 0x53)
				{
					RxState = 2;
					pRxPacket = 0;
					Check = 0x55 + 0x53;
				}
				else
				{
					RxState = 0;
				}
				break;
			}
			case 2:
			{
				IMU_RxPacket[pRxPacket++] = RxData;
				Check += RxData;
				if(pRxPacket >= 8)
				{
					RxState = 3;
				}
				break;
			}
			case 3:
			{
				if(RxData == Check)
				{
					RxState = 0;
					IMU_OutPacket = IMU_RxPacket;
					IMU_Flag = 1;
				}
				else
				{
					RxState = 0;
					IMU_OutPacket = IMU_ErrPacket;
				}
				break;
			}
		}
		
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
	}
}
